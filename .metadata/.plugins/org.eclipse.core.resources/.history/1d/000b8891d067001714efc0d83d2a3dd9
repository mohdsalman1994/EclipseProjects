package com.aceprogrammer.basics.LinkedList;

class Node
{
	String data;
	Node link;
	
	Node()
	{
	link = null;
	}
}


public class UnorderedLinkedList {

	Node p = null;	
	int count = 0;
	
	void append(String value)
	{		
		Node q;
		
		Node temp = new Node();
		temp.data = value;
		temp.link = null;
		
		if(p == null)
		{
			System.out.println("Creating the list");
			p = temp;
			System.out.println("Node added successfully");
			count++;
		}
		
		else
		{
			q = p;
			
			while(q.link!= null)
			{
				q = q.link;
			}
			
			q.link = temp;
			count++;
			
			
		}
		
	}
	
	
	void display()
	{
		Node q;
		q = p;
		
		if(q == null)
		{
			System.out.println("List is empty");
		}
		
		else
			
			while(q!= null)
			{
				System.out.print(q.data+" ");
				q = q.link;
			}
		System.out.println();
	}
	
	
	void insert(String value)
	{						
		
		Node q, old;
		boolean found = false;
		
		q=p;
		old = p;
				
//					
//		if(q== null)
//		{		 
//		 append(value);
//		}
		if(q!= null)
		{
			
			while(q!= null)
			{
								
				if(q.data.equals(value))
				{
					if(q == p)
					{
						q = q.link;
						found = true;
					}
					else
					{
					old.link = q.link;
					found = true;
					q = null;
					}
					System.out.println("value found");
					count--;
				}
				
				else
				{
					System.out.println("Looping");
					old = q;
					q=q.link;
				}
			} // end while
			
			if(found == true)
			{
				System.out.println("Value found and deleted");
			}
			else
			{
				System.out.println("Trying to append");
				
				append(value);
			}
			
		}
		
	}
	
	public String[] toWordArray() throws RuntimeException
	{
		if(count == 0)
		{
			throw new RuntimeException("List is empty");
		}
		
		else
			
		{
			String[] words = new String[count];
			Node q=p;
			int i = 0;
			while(q!= null)
			{
				words[i] = q.data;
				q = q.link;
			}
			
			return words;
		}
			
	}

}
